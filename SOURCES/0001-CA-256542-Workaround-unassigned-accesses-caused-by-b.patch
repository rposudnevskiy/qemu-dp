From bad71b32564565d340497a4e29b10577b0239b42 Mon Sep 17 00:00:00 2001
From: Igor Druzhinin <igor.druzhinin@citrix.com>
Date: Tue, 20 Jun 2017 17:24:43 +0100
Subject: [PATCH] CA-256542 Workaround unassigned accesses caused by ballooning

Xen Balloon memory hotplug makes a guest to populate memory areas
which are not sufficiently described in QEMU. Some legacy Linux
kernels, in turn, may try to allocate DMA buffers for emulated devices
in these areas. When QEMU receives an address which is not present
in its memory map it marks that as 'unassigned' and avoids any
DMA processing. That eventually results in broken emulation and
guest error reporting.

Since we want to support legacy guests as we did on QEMU-trad we
introduce "allow-unassigned" mode in a form of machine option.
We try to intercept and correctly process all the unassigned memory
accesses in QEMU in this mode.

Signed-off-by: Igor Druzhinin <igor.druzhinin@citrix.com>
diff --git a/hw/i386/pc.c b/hw/i386/pc.c
index 0945fad..05c72da 100644
--- a/hw/i386/pc.c
+++ b/hw/i386/pc.c
@@ -2236,6 +2236,21 @@ static void pc_machine_set_trad_compat(Object *obj, bool value, Error **errp)
     pcms->is_trad_compat = value;
 }
 
+static bool pc_machine_get_allow_unassigned(Object *obj, Error **errp)
+{
+    PCMachineState *pcms = PC_MACHINE(obj);
+
+    return pcms->allow_unassigned;
+}
+
+static void pc_machine_set_allow_unassigned(Object *obj, bool value,
+                                            Error **errp)
+{
+    PCMachineState *pcms = PC_MACHINE(obj);
+
+    pcms->allow_unassigned = value;
+}
+
 static void pc_machine_initfn(Object *obj)
 {
     PCMachineState *pcms = PC_MACHINE(obj);
@@ -2251,6 +2266,7 @@ static void pc_machine_initfn(Object *obj)
     pcms->sata = true;
     pcms->pit = true;
     pcms->is_trad_compat = false;
+    pcms->allow_unassigned = false;
 }
 
 static void pc_machine_reset(void)
@@ -2414,6 +2430,10 @@ static void pc_machine_class_init(ObjectClass *oc, void *data)
 
     object_class_property_add_bool(oc, PC_MACHINE_TRAD_COMPAT,
         pc_machine_get_trad_compat, pc_machine_set_trad_compat, &error_abort);
+
+    object_class_property_add_bool(oc, PC_MACHINE_ALLOW_UNASSIGNED,
+        pc_machine_get_allow_unassigned, pc_machine_set_allow_unassigned,
+        &error_abort);
 }
 
 static const TypeInfo pc_machine_info = {
diff --git a/hw/i386/xen/xen-hvm.c b/hw/i386/xen/xen-hvm.c
index ffd20dc..ba2c237 100644
--- a/hw/i386/xen/xen-hvm.c
+++ b/hw/i386/xen/xen-hvm.c
@@ -24,6 +24,7 @@
 #include "sysemu/xen-mapcache.h"
 #include "trace.h"
 #include "exec/address-spaces.h"
+#include "exec/ram_addr.h"
 
 #include <xen/hvm/ioreq.h>
 #include <xen/hvm/params.h>
@@ -42,6 +43,7 @@
 static MemoryRegion ram_memory, ram_640k, ram_lo, ram_hi;
 static MemoryRegion *framebuffer;
 static bool xen_in_migration;
+static bool allow_unassigned;
 
 /* Compatibility with older version */
 
@@ -1385,6 +1387,10 @@ void xen_hvm_init(PCMachineState *pcms, MemoryRegion **ram_memory)
     /* Disable ACPI build because Xen handles it */
     pcms->acpi_build_enabled = false;
 
+    /* Allow unassigned memory accesses if requested */
+    allow_unassigned = object_property_get_bool(qdev_get_machine(),
+                                                PC_MACHINE_ALLOW_UNASSIGNED,
+                                                &error_abort);
     return;
 
 err:
@@ -1461,3 +1467,34 @@ void qmp_xen_set_global_dirty_log(bool enable, Error **errp)
         memory_global_dirty_log_stop();
     }
 }
+
+void xen_unassigned_access(hwaddr addr, bool is_write, void *val,
+                           unsigned size)
+{
+    uint8_t *host;
+
+    if (!allow_unassigned) {
+        return;
+    }
+
+    /* XXX How do we know if this is for DMA? Assume it is for now... */
+    host = xen_map_cache(addr, 0, 0, true);
+    if (!host) {
+         DPRINTF("unhandled unassigned %s: addr=0x%lx size=%u\n",
+                 is_write ? "write": "read", addr, size);
+         if (!is_write) {
+             memset(val, 0, size);
+         }
+         return;
+    }
+
+    DPRINTF("unassigned %s: addr=0x%lx host=0x%lx size=%u\n",
+            is_write ? "write": "read", addr, (uint64_t)host, size);
+
+    if (is_write) {
+        memcpy(host, val, size);
+        cpu_physical_memory_set_dirty_range(addr, size, 1 << DIRTY_MEMORY_MIGRATION);
+    } else {
+        memcpy(val, host, size);
+    }
+}
diff --git a/include/hw/i386/pc.h b/include/hw/i386/pc.h
index a081ae1..e8ff0cb 100644
--- a/include/hw/i386/pc.h
+++ b/include/hw/i386/pc.h
@@ -71,6 +71,7 @@ struct PCMachineState {
     AddressSpace *ioapic_as;
 
     bool is_trad_compat;
+    bool allow_unassigned;
 };
 
 #define PC_MACHINE_ACPI_DEVICE_PROP "acpi-device"
@@ -83,6 +84,7 @@ struct PCMachineState {
 #define PC_MACHINE_SATA             "sata"
 #define PC_MACHINE_PIT              "pit"
 #define PC_MACHINE_TRAD_COMPAT      "trad-compat"
+#define PC_MACHINE_ALLOW_UNASSIGNED "allow-unassigned"
 
 /**
  * PCMachineClass:
diff --git a/include/hw/xen/xen.h b/include/hw/xen/xen.h
index 7efcdaa..a3038f1 100644
--- a/include/hw/xen/xen.h
+++ b/include/hw/xen/xen.h
@@ -48,4 +48,6 @@ void xen_hvm_modified_memory(ram_addr_t start, ram_addr_t length);
 
 void xen_register_framebuffer(struct MemoryRegion *mr);
 
+void xen_unassigned_access(hwaddr addr, bool is_write, void *val,
+                           unsigned size);
 #endif /* QEMU_HW_XEN_H */
diff --git a/memory.c b/memory.c
index c0adc35..1dfb840 100644
--- a/memory.c
+++ b/memory.c
@@ -1117,6 +1117,11 @@ static uint64_t unassigned_mem_read(void *opaque, hwaddr addr,
     if (current_cpu != NULL) {
         cpu_unassigned_access(current_cpu, addr, false, false, 0, size);
     }
+    if (xen_enabled()) {
+        uint64_t val;
+        xen_unassigned_access(addr, false, &val, size);
+        return val;
+    }
     return 0;
 }
 
@@ -1129,6 +1134,9 @@ static void unassigned_mem_write(void *opaque, hwaddr addr,
     if (current_cpu != NULL) {
         cpu_unassigned_access(current_cpu, addr, true, false, 0, size);
     }
+    if (xen_enabled()) {
+        xen_unassigned_access(addr, true, &val, size);
+    }
 }
 
 static bool unassigned_mem_accepts(void *opaque, hwaddr addr,
