diff --git a/hw/xen/xen_pt.c b/hw/xen/xen_pt.c
index 375efa6..4750e2c 100644
--- a/hw/xen/xen_pt.c
+++ b/hw/xen/xen_pt.c
@@ -259,7 +259,7 @@ static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
             chk |= (uint32_t)~PCI_ROM_ADDRESS_MASK;
 
         if ((chk != XEN_PT_BAR_ALLF) &&
-            (s->bases[index].bar_flag == XEN_PT_BAR_FLAG_UNUSED)) {
+            (s->bar[index].region.bar_flag == XEN_PT_BAR_FLAG_UNUSED)) {
             XEN_PT_WARN(d, "Guest attempt to set address to unused "
                         "Base Address Register. (addr: 0x%02x, len: %d)\n",
                         addr, len);
@@ -416,31 +416,139 @@ out:
 
 /* register regions */
 
-static uint64_t xen_pt_bar_read(void *o, hwaddr addr,
-                                unsigned size)
+static uint64_t xen_pt_mr_read(void *o, hwaddr addr, unsigned size)
 {
-    PCIDevice *d = o;
-    /* if this function is called, that probably means that there is a
-     * misconfiguration of the IOMMU. */
-    XEN_PT_ERR(d, "Should not read BAR through QEMU. @0x"TARGET_FMT_plx"\n",
-               addr);
-    return 0;
+    XenPTBAR *bar = o;
+    uint64_t value;
+
+    bar->read(bar, addr, size, &value);
+
+    return value;
 }
-static void xen_pt_bar_write(void *o, hwaddr addr, uint64_t val,
-                             unsigned size)
+
+static void xen_pt_mr_write(void *o, hwaddr addr, uint64_t value,
+                            unsigned size)
 {
-    PCIDevice *d = o;
-    /* Same comment as xen_pt_bar_read function */
-    XEN_PT_ERR(d, "Should not write BAR through QEMU. @0x"TARGET_FMT_plx"\n",
-               addr);
+    XenPTBAR *bar = o;
+
+    bar->write(bar, addr, size, value);
 }
 
 static const MemoryRegionOps ops = {
     .endianness = DEVICE_NATIVE_ENDIAN,
-    .read = xen_pt_bar_read,
-    .write = xen_pt_bar_write,
+    .read = xen_pt_mr_read,
+    .write = xen_pt_mr_write,
 };
 
+static void xen_pt_io_bar_update(struct XenPCIPassthroughState *s,
+                                 unsigned int index,
+                                 MemoryRegionSection *sec, int op)
+{
+    PCIDevice *d = &s->dev;
+    uint32_t guest_port = sec->offset_within_address_space;
+    uint32_t machine_port = s->bar[index].region.access.pio_base;
+    uint32_t range = int128_get64(sec->size);
+    int rc;
+
+    assert(d->io_regions[index].type & PCI_BASE_ADDRESS_SPACE_IO);
+
+    XEN_PT_LOG(d, "%s BAR[%d]: (IO) %04x -> %04x [%04x]\n",
+               op == DPCI_ADD_MAPPING ? "MAP" : "UNMAP",
+               index, guest_port, machine_port, range);
+    rc = xc_domain_ioport_mapping(xen_xc, xen_domid, guest_port,
+                                  machine_port, range, op);
+    if (rc) {
+        XEN_PT_ERR(d, "%s ioport mapping failed! (err: %i)\n",
+                   op == DPCI_ADD_MAPPING ? "create new" : "remove old",
+                   errno);
+    }
+}
+
+static void xen_pt_io_bar_map(XenPTBAR *bar,
+                              MemoryRegionSection *sec)
+{
+    struct XenPCIPassthroughState *s = bar->s;
+    unsigned int index = bar - &s->bar[0];
+
+    xen_pt_io_bar_update(s, index, sec, DPCI_ADD_MAPPING);
+}
+
+static void xen_pt_io_bar_unmap(XenPTBAR *bar,
+                                MemoryRegionSection *sec)
+{
+    struct XenPCIPassthroughState *s = bar->s;
+    unsigned int index = bar - &s->bar[0];
+
+    xen_pt_io_bar_update(s, index, sec, DPCI_REMOVE_MAPPING);
+}
+
+static void xen_pt_io_bar_read(XenPTBAR *bar, hwaddr addr,
+                               unsigned int size, uint64_t *value)
+{
+}
+
+static void xen_pt_io_bar_write(XenPTBAR *bar, hwaddr addr,
+                                unsigned int size, uint64_t value)
+{
+}
+
+static void xen_pt_memory_bar_update(struct XenPCIPassthroughState *s,
+                                     unsigned int index,
+                                     MemoryRegionSection *sec, int op)
+{
+    PCIDevice *d = &s->dev;
+    pcibus_t guest_addr = sec->offset_within_address_space;
+    pcibus_t machine_addr = s->bar[index].region.access.maddr +
+        sec->offset_within_region;
+    pcibus_t size = int128_get64(sec->size);
+    int rc;
+
+    assert(!(d->io_regions[index].type & PCI_BASE_ADDRESS_SPACE_IO));
+
+    XEN_PT_LOG(d, "%s BAR[%d]: (MEM) %p -> %p [%p]\n",
+               op == DPCI_ADD_MAPPING ? "MAP" : "UNMAP",
+               index, (void *)guest_addr, (void *)machine_addr,
+               (void *)size);
+    rc = xc_domain_memory_mapping(xen_xc, xen_domid,
+                                  XEN_PFN(guest_addr + XC_PAGE_SIZE - 1),
+                                  XEN_PFN(machine_addr + XC_PAGE_SIZE - 1),
+                                  XEN_PFN(size + XC_PAGE_SIZE - 1),
+                                  op);
+    if (rc) {
+        XEN_PT_ERR(d, "%s mem mapping failed! (err: %i)\n",
+                   op == DPCI_ADD_MAPPING ? "create new" : "remove old",
+                   errno);
+    }
+}
+
+static void xen_pt_memory_bar_map(XenPTBAR *bar,
+                                  MemoryRegionSection *sec)
+{
+    struct XenPCIPassthroughState *s = bar->s;
+    unsigned int index = bar - &s->bar[0];
+
+    xen_pt_memory_bar_update(s, index, sec, DPCI_ADD_MAPPING);
+}
+
+static void xen_pt_memory_bar_unmap(XenPTBAR *bar,
+                                    MemoryRegionSection *sec)
+{
+    struct XenPCIPassthroughState *s = bar->s;
+    unsigned int index = bar - &s->bar[0];
+
+    xen_pt_memory_bar_update(s, index, sec, DPCI_REMOVE_MAPPING);
+}
+
+static void xen_pt_memory_bar_read(XenPTBAR *bar, hwaddr addr,
+                                   unsigned int size, uint64_t *value)
+{
+}
+
+static void xen_pt_memory_bar_write(XenPTBAR *bar, hwaddr addr,
+                                    unsigned int size, uint64_t value)
+{
+}
+
 static int xen_pt_register_regions(XenPCIPassthroughState *s, uint16_t *cmd)
 {
     int i = 0;
@@ -455,7 +563,9 @@ static int xen_pt_register_regions(XenPCIPassthroughState *s, uint16_t *cmd)
             continue;
         }
 
-        s->bases[i].access.u = r->base_addr;
+        s->bar[i].s = s;
+        s->bar[i].region.access.u = r->base_addr;
+        s->bar[i].region.size = r->base_addr;
 
         if (r->type & XEN_HOST_PCI_REGION_TYPE_IO) {
             type = PCI_BASE_ADDRESS_SPACE_IO;
@@ -471,9 +581,21 @@ static int xen_pt_register_regions(XenPCIPassthroughState *s, uint16_t *cmd)
             *cmd |= PCI_COMMAND_MEMORY;
         }
 
-        memory_region_init_io(&s->bar[i], OBJECT(s), &ops, &s->dev,
+        if (type == PCI_BASE_ADDRESS_SPACE_IO) {
+            s->bar[i].map = xen_pt_io_bar_map;
+            s->bar[i].unmap = xen_pt_io_bar_unmap;
+            s->bar[i].read = xen_pt_io_bar_read;
+            s->bar[i].write = xen_pt_io_bar_write;
+        } else {
+            s->bar[i].map = xen_pt_memory_bar_map;
+            s->bar[i].unmap = xen_pt_memory_bar_unmap;
+            s->bar[i].read = xen_pt_memory_bar_read;
+            s->bar[i].write = xen_pt_memory_bar_write;
+        }
+
+        memory_region_init_io(&s->bar[i].mr, OBJECT(s), &ops, &s->bar[i],
                               "xen-pci-pt-bar", r->size);
-        pci_register_bar(&s->dev, i, type, &s->bar[i]);
+        pci_register_bar(&s->dev, i, type, &s->bar[i].mr);
 
         XEN_PT_LOG(&s->dev, "IO region %i registered (size=0x%08"PRIx64
                    " base_addr=0x%08"PRIx64" type: %#x)\n",
@@ -493,19 +615,27 @@ static int xen_pt_register_regions(XenPCIPassthroughState *s, uint16_t *cmd)
             xen_host_pci_set_long(d, PCI_ROM_ADDRESS, bar_data);
         }
 
-        s->bases[PCI_ROM_SLOT].access.maddr = d->rom.base_addr;
-
-        memory_region_init_io(&s->rom, OBJECT(s), &ops, &s->dev,
-                              "xen-pci-pt-rom", d->rom.size);
-        pci_register_bar(&s->dev, PCI_ROM_SLOT, PCI_BASE_ADDRESS_MEM_PREFETCH,
-                         &s->rom);
+        s->bar[PCI_ROM_SLOT].s = s;
+        s->bar[PCI_ROM_SLOT].region.access.maddr = d->rom.base_addr;
+        s->bar[PCI_ROM_SLOT].region.size = d->rom.size;
+        s->bar[PCI_ROM_SLOT].map = xen_pt_memory_bar_map;
+        s->bar[PCI_ROM_SLOT].unmap = xen_pt_memory_bar_unmap;
+        s->bar[PCI_ROM_SLOT].read = xen_pt_memory_bar_read;
+        s->bar[PCI_ROM_SLOT].write = xen_pt_memory_bar_write;
+
+        memory_region_init_io(&s->bar[PCI_ROM_SLOT].mr, OBJECT(s), &ops,
+                              &s->bar[PCI_ROM_SLOT], "xen-pci-pt-rom",
+                              d->rom.size);
+        pci_register_bar(&s->dev, PCI_ROM_SLOT,
+                         PCI_BASE_ADDRESS_MEM_PREFETCH,
+                         &s->bar[PCI_ROM_SLOT].mr);
 
         XEN_PT_LOG(&s->dev, "Expansion ROM registered (size=0x%08"PRIx64
                    " base_addr=0x%08"PRIx64")\n",
                    d->rom.size, d->rom.base_addr);
     }
 
-    xen_pt_register_vga_regions(d);
+    xen_pt_register_vga_regions(s);
     return 0;
 }
 
@@ -515,14 +645,11 @@ static int xen_pt_bar_from_region(XenPCIPassthroughState *s, MemoryRegion *mr)
 {
     int i = 0;
 
-    for (i = 0; i < PCI_NUM_REGIONS - 1; i++) {
-        if (mr == &s->bar[i]) {
+    for (i = 0; i < PCI_NUM_REGIONS; i++) {
+        if (mr == &s->bar[i].mr) {
             return i;
         }
     }
-    if (mr == &s->rom) {
-        return PCI_ROM_SLOT;
-    }
     return -1;
 }
 
@@ -578,64 +705,43 @@ static void xen_pt_region_update(XenPCIPassthroughState *s,
 {
     PCIDevice *d = &s->dev;
     MemoryRegion *mr = sec->mr;
-    int bar = -1;
-    int rc;
-    int op = adding ? DPCI_ADD_MAPPING : DPCI_REMOVE_MAPPING;
+    int index = -1;
     struct CheckBarArgs args = {
         .s = s,
         .addr = sec->offset_within_address_space,
         .size = int128_get64(sec->size),
         .rc = false,
     };
+    XenPTBAR *bar;
 
-    bar = xen_pt_bar_from_region(s, mr);
-    if (bar == -1 && (!s->msix || &s->msix->mmio != mr)) {
+    index = xen_pt_bar_from_region(s, mr);
+    if (index == -1 && (!s->msix || &s->msix->mmio != mr)) {
         return;
     }
 
     if (s->msix && &s->msix->mmio == mr) {
         if (adding) {
             s->msix->mmio_base_addr = sec->offset_within_address_space;
-            rc = xen_pt_msix_update_remap(s, s->msix->bar_index);
+            xen_pt_msix_update_remap(s, s->msix->bar_index);
         }
         return;
     }
 
-    args.type = d->io_regions[bar].type;
+    args.type = d->io_regions[index].type;
     pci_for_each_device(d->bus, pci_bus_num(d->bus),
                         xen_pt_check_bar_overlap, &args);
     if (args.rc) {
         XEN_PT_WARN(d, "Region: %d (addr: %#"FMT_PCIBUS
                     ", len: %#"FMT_PCIBUS") is overlapped.\n",
-                    bar, sec->offset_within_address_space,
+                    index, sec->offset_within_address_space,
                     int128_get64(sec->size));
     }
 
-    if (d->io_regions[bar].type & PCI_BASE_ADDRESS_SPACE_IO) {
-        uint32_t guest_port = sec->offset_within_address_space;
-        uint32_t machine_port = s->bases[bar].access.pio_base;
-        uint32_t size = int128_get64(sec->size);
-        rc = xc_domain_ioport_mapping(xen_xc, xen_domid,
-                                      guest_port, machine_port, size,
-                                      op);
-        if (rc) {
-            XEN_PT_ERR(d, "%s ioport mapping failed! (err: %i)\n",
-                       adding ? "create new" : "remove old", errno);
-        }
+    bar = &s->bar[index];
+    if (adding) {
+        bar->map(bar, sec);
     } else {
-        pcibus_t guest_addr = sec->offset_within_address_space;
-        pcibus_t machine_addr = s->bases[bar].access.maddr
-            + sec->offset_within_region;
-        pcibus_t size = int128_get64(sec->size);
-        rc = xc_domain_memory_mapping(xen_xc, xen_domid,
-                                      XEN_PFN(guest_addr + XC_PAGE_SIZE - 1),
-                                      XEN_PFN(machine_addr + XC_PAGE_SIZE - 1),
-                                      XEN_PFN(size + XC_PAGE_SIZE - 1),
-                                      op);
-        if (rc) {
-            XEN_PT_ERR(d, "%s mem mapping failed! (err: %i)\n",
-                       adding ? "create new" : "remove old", errno);
-        }
+        bar->unmap(bar, sec);
     }
 }
 
@@ -702,7 +808,6 @@ xen_igd_passthrough_isa_bridge_create(XenPCIPassthroughState *s,
 static void xen_pt_destroy(PCIDevice *d) {
 
     XenPCIPassthroughState *s = XEN_PT_DEVICE(d);
-    XenHostPCIDevice *host_dev = &s->real_device;
     uint8_t machine_irq = s->machine_irq;
     uint8_t intx;
     int rc;
@@ -749,7 +854,7 @@ static void xen_pt_destroy(PCIDevice *d) {
     /* delete all emulated config registers */
     xen_pt_config_delete(s);
 
-    xen_pt_unregister_vga_regions(host_dev);
+    xen_pt_unregister_vga_regions(s);
 
     if (s->listener_set) {
         memory_listener_unregister(&s->memory_listener);
@@ -917,10 +1022,9 @@ out:
     return;
 
 err_out:
-    for (i = 0; i < PCI_ROM_SLOT; i++) {
-        object_unparent(OBJECT(&s->bar[i]));
+    for (i = 0; i < PCI_NUM_REGIONS; i++) {
+        object_unparent(OBJECT(&s->bar[i].mr));
     }
-    object_unparent(OBJECT(&s->rom));
 
     xen_pt_destroy(d);
     assert(rc);
diff --git a/hw/xen/xen_pt.h b/hw/xen/xen_pt.h
index 191d9ca..d422482 100644
--- a/hw/xen/xen_pt.h
+++ b/hw/xen/xen_pt.h
@@ -95,6 +95,7 @@ typedef struct XenPTRegion {
         uint64_t pio_base;
         uint64_t u;
     } access;
+    uint64_t size;
 } XenPTRegion;
 
 /* XenPTRegInfo declaration
@@ -192,6 +193,7 @@ typedef struct XenPTMSIXEntry {
     uint32_t latch[4];
     bool updated; /* indicate whether MSI ADDR or DATA is updated */
 } XenPTMSIXEntry;
+
 typedef struct XenPTMSIX {
     uint32_t ctrl_offset;
     bool enabled;
@@ -206,6 +208,18 @@ typedef struct XenPTMSIX {
     XenPTMSIXEntry msix_entry[0];
 } XenPTMSIX;
 
+typedef struct XenPTBAR {
+    struct XenPCIPassthroughState *s;
+    XenPTRegion region;
+    void (*map)(struct XenPTBAR *bar, MemoryRegionSection *sec);
+    void (*unmap)(struct XenPTBAR *bar, MemoryRegionSection *sec);
+    void (*read)(struct XenPTBAR *bar, hwaddr addr, unsigned int size,
+                 uint64_t *value);
+    void (*write)(struct XenPTBAR *bar, hwaddr addr, unsigned int size,
+                  uint64_t value);
+    MemoryRegion mr;
+} XenPTBAR;
+
 struct XenPCIPassthroughState {
     PCIDevice dev;
 
@@ -214,16 +228,13 @@ struct XenPCIPassthroughState {
     bool permissive;
     bool permissive_warned;
     XenHostPCIDevice real_device;
-    XenPTRegion bases[PCI_NUM_REGIONS]; /* Access regions */
     QLIST_HEAD(, XenPTRegGroup) reg_grps;
 
     uint32_t machine_irq;
 
     XenPTMSI *msi;
     XenPTMSIX *msix;
-
-    MemoryRegion bar[PCI_NUM_REGIONS - 1];
-    MemoryRegion rom;
+    XenPTBAR bar[PCI_NUM_REGIONS];
 
     MemoryListener memory_listener;
     MemoryListener io_listener;
@@ -328,8 +339,8 @@ static inline bool is_igd_vga_passthrough(XenHostPCIDevice *dev)
     return (has_igd_gfx_passthru
             && ((dev->class_code >> 0x8) == PCI_CLASS_DISPLAY_VGA));
 }
-int xen_pt_register_vga_regions(XenHostPCIDevice *dev);
-int xen_pt_unregister_vga_regions(XenHostPCIDevice *dev);
+int xen_pt_register_vga_regions(XenPCIPassthroughState *s);
+int xen_pt_unregister_vga_regions(XenPCIPassthroughState *s);
 void xen_pt_setup_vga(XenPCIPassthroughState *s, XenHostPCIDevice *dev,
                      Error **errp);
 #endif /* XEN_PT_H */
diff --git a/hw/xen/xen_pt_config_init.c b/hw/xen/xen_pt_config_init.c
index 6baf5d7..dc31072 100644
--- a/hw/xen/xen_pt_config_init.c
+++ b/hw/xen/xen_pt_config_init.c
@@ -408,7 +408,7 @@ static XenPTBarFlag xen_pt_bar_reg_parse(XenPCIPassthroughState *s,
 
         if ((type & XEN_HOST_PCI_REGION_TYPE_MEM)
             && (type & XEN_HOST_PCI_REGION_TYPE_MEM_64)) {
-            region = &s->bases[index - 1];
+            region = &s->bar[index - 1].region;
             if (region->bar_flag != XEN_PT_BAR_FLAG_UPPER) {
                 return XEN_PT_BAR_FLAG_UPPER;
             }
@@ -456,8 +456,8 @@ static int xen_pt_bar_reg_init(XenPCIPassthroughState *s, XenPTRegInfo *reg,
     }
 
     /* set BAR flag */
-    s->bases[index].bar_flag = xen_pt_bar_reg_parse(s, index);
-    if (s->bases[index].bar_flag == XEN_PT_BAR_FLAG_UNUSED) {
+    s->bar[index].region.bar_flag = xen_pt_bar_reg_parse(s, index);
+    if (s->bar[index].region.bar_flag == XEN_PT_BAR_FLAG_UNUSED) {
         reg_field = XEN_PT_INVALID_REG;
     }
 
@@ -483,7 +483,7 @@ static int xen_pt_bar_reg_read(XenPCIPassthroughState *s, XenPTReg *cfg_entry,
     *value = base_address_with_flags(&s->real_device.io_regions[index]);
 
     /* set emulate mask depend on BAR flag */
-    switch (s->bases[index].bar_flag) {
+    switch (s->bar[index].region.bar_flag) {
     case XEN_PT_BAR_FLAG_MEM:
         bar_emu_mask = XEN_PT_BAR_MEM_EMU_MASK;
         break;
@@ -508,7 +508,7 @@ static int xen_pt_bar_reg_write(XenPCIPassthroughState *s, XenPTReg *cfg_entry,
                                 uint32_t valid_mask)
 {
     XenPTRegInfo *reg = cfg_entry->reg;
-    XenPTRegion *base = NULL;
+    XenPTRegion *region = NULL;
     PCIDevice *d = &s->dev;
     const PCIIORegion *r;
     uint32_t writable_mask = 0;
@@ -525,11 +525,11 @@ static int xen_pt_bar_reg_write(XenPCIPassthroughState *s, XenPTReg *cfg_entry,
     }
 
     r = &d->io_regions[index];
-    base = &s->bases[index];
-    r_size = xen_pt_get_emul_size(base->bar_flag, r->size);
+    region = &s->bar[index].region;
+    r_size = xen_pt_get_emul_size(region->bar_flag, r->size);
 
     /* set emulate mask and read-only mask values depend on the BAR flag */
-    switch (s->bases[index].bar_flag) {
+    switch (region->bar_flag) {
     case XEN_PT_BAR_FLAG_MEM:
         bar_emu_mask = XEN_PT_BAR_MEM_EMU_MASK;
         if (!r_size) {
@@ -556,7 +556,7 @@ static int xen_pt_bar_reg_write(XenPCIPassthroughState *s, XenPTReg *cfg_entry,
     *data = XEN_PT_MERGE_VALUE(*val, *data, writable_mask);
 
     /* check whether we need to update the virtual region address or not */
-    switch (s->bases[index].bar_flag) {
+    switch (region->bar_flag) {
     case XEN_PT_BAR_FLAG_UPPER:
     case XEN_PT_BAR_FLAG_MEM:
         /* nothing to do */
@@ -580,7 +580,7 @@ static int xen_pt_exp_rom_bar_reg_write(XenPCIPassthroughState *s,
                                         uint32_t dev_value, uint32_t valid_mask)
 {
     XenPTRegInfo *reg = cfg_entry->reg;
-    XenPTRegion *base = NULL;
+    XenPTRegion *region = NULL;
     PCIDevice *d = (PCIDevice *)&s->dev;
     uint32_t writable_mask = 0;
     uint32_t throughable_mask = get_throughable_mask(s, reg, valid_mask);
@@ -589,9 +589,9 @@ static int xen_pt_exp_rom_bar_reg_write(XenPCIPassthroughState *s,
     uint32_t *data = cfg_entry->ptr.word;
 
     r_size = d->io_regions[PCI_ROM_SLOT].size;
-    base = &s->bases[PCI_ROM_SLOT];
+    region = &s->bar[PCI_ROM_SLOT].region;
     /* align memory type resource size */
-    r_size = xen_pt_get_emul_size(base->bar_flag, r_size);
+    r_size = xen_pt_get_emul_size(region->bar_flag, r_size);
 
     /* set emulate mask and read-only mask */
     bar_ro_mask = (reg->ro_mask | (r_size - 1)) & ~PCI_ROM_ADDRESS_ENABLE;
diff --git a/hw/xen/xen_pt_graphics.c b/hw/xen/xen_pt_graphics.c
index 0f4c8d7..511778c 100644
--- a/hw/xen/xen_pt_graphics.c
+++ b/hw/xen/xen_pt_graphics.c
@@ -50,11 +50,16 @@ static struct VGARegion vga_args[] = {
 /*
  * register VGA resources for the domain with assigned gfx
  */
-int xen_pt_register_vga_regions(XenHostPCIDevice *dev)
+int xen_pt_register_vga_regions(XenPCIPassthroughState *s)
 {
+    XenHostPCIDevice *host_dev = &s->real_device;
     int i = 0;
 
-    if (!is_igd_vga_passthrough(dev)) {
+    XEN_PT_LOG(&s->dev, "vendor: %04x device: %04x: class: %08x\n",
+               host_dev->vendor_id, host_dev->device_id,
+               host_dev->class_code);
+
+    if (!is_igd_vga_passthrough(host_dev)) {
         return 0;
     }
 
@@ -85,12 +90,17 @@ int xen_pt_register_vga_regions(XenHostPCIDevice *dev)
 /*
  * unregister VGA resources for the domain with assigned gfx
  */
-int xen_pt_unregister_vga_regions(XenHostPCIDevice *dev)
+int xen_pt_unregister_vga_regions(XenPCIPassthroughState *s)
 {
+    XenHostPCIDevice *host_dev = &s->real_device;
     int i = 0;
     int ret = 0;
 
-    if (!is_igd_vga_passthrough(dev)) {
+    XEN_PT_LOG(&s->dev, "vendor: %04x device: %04x: class: %08x\n",
+               host_dev->vendor_id, host_dev->device_id,
+               host_dev->class_code);
+
+    if (!is_igd_vga_passthrough(host_dev)) {
         return 0;
     }
 
diff --git a/hw/xen/xen_pt_msi.c b/hw/xen/xen_pt_msi.c
index 62add06..7f093c7 100644
--- a/hw/xen/xen_pt_msi.c
+++ b/hw/xen/xen_pt_msi.c
@@ -588,7 +588,7 @@ int xen_pt_msix_init(XenPCIPassthroughState *s, uint32_t base)
     XEN_PT_LOG(d, "mapping physical MSI-X table to %p\n",
                msix->phys_iomem_base);
 
-    memory_region_add_subregion_overlap(&s->bar[bar_index], table_off,
+    memory_region_add_subregion_overlap(&s->bar[bar_index].mr, table_off,
                                         &msix->mmio,
                                         2); /* Priority: pci default + 1 */
 
@@ -616,7 +616,7 @@ void xen_pt_msix_unmap(XenPCIPassthroughState *s)
                + msix->table_offset_adjust);
     }
 
-    memory_region_del_subregion(&s->bar[msix->bar_index], &msix->mmio);
+    memory_region_del_subregion(&s->bar[msix->bar_index].mr, &msix->mmio);
 }
 
 void xen_pt_msix_delete(XenPCIPassthroughState *s)
