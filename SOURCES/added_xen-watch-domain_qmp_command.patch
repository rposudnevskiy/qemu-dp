Added xen-watch-domain qmp command

From: Edwin Torok <edvin.torok@citrix.com>

From: Edwin Torok <edvin.torok@citrix.com>

an be used at runtime instead of -xen-domid N on the command-line.
This doesn't affect the global xen_domid.

diff --git a/hw/block/xen_disk.c b/hw/block/xen_disk.c
index 6ac361b..d195c66 100644
--- a/hw/block/xen_disk.c
+++ b/hw/block/xen_disk.c
@@ -97,6 +97,8 @@ struct XenBlkDev {
     bool                directiosafe;
     const char          *fileproto;
     const char          *filename;
+    const char          *devicename;
+    const char          *nodename;
     unsigned int        ring_ref[1 << MAX_RING_PAGE_ORDER];
     unsigned int        nr_ring_ref;
     void                *sring;
@@ -1006,6 +1008,12 @@ static int blk_init(struct XenDevice *xendev)
             blkdev->filename  = blkdev->params;
         }
     }
+    if (xendev->blocknode) {
+        /* override "params" */
+        blkdev->devicename = xendev->devicename;
+        blkdev->nodename = xendev->blocknode;
+        blkdev->filename = NULL;
+    }
     if (!strcmp("aio", blkdev->fileproto)) {
         blkdev->fileproto = "raw";
     }
@@ -1133,10 +1141,14 @@ static int blk_connect(struct XenDevice *xendev)
             options = qdict_new();
             qdict_put_str(options, "driver", blkdev->fileproto);
         }
+        if (blkdev->nodename) {
+            xen_pv_printf(&blkdev->xendev, 2, "looking up blockdev node %s\n", blkdev->nodename);
+            options = NULL;
+        }
 
         /* setup via xenbus -> create new block driver instance */
         xen_pv_printf(&blkdev->xendev, 2, "create new bdrv (xenbus setup)\n");
-        blkdev->blk = blk_new_open(blkdev->filename, NULL, options,
+        blkdev->blk = blk_new_open(blkdev->filename, blkdev->nodename, options,
                                    qflags, &local_err);
         if (!blkdev->blk) {
             xen_pv_printf(&blkdev->xendev, 0, "error: %s\n",
@@ -1226,6 +1238,12 @@ static int blk_connect(struct XenDevice *xendev)
         blkdev->feature_persistent = !!pers;
     }
 
+
+    if (blkdev->devicename) {
+        Error *errp; /* FIXME */
+        monitor_add_blk(blkdev->blk, strdup(blkdev->devicename), &errp);
+    }
+
     if (!blkdev->xendev.protocol) {
         blkdev->protocol = BLKIF_PROTOCOL_NATIVE;
     } else if (strcmp(blkdev->xendev.protocol, XEN_IO_PROTO_ABI_NATIVE) == 0) {
diff --git a/hw/xen/xen_backend.c b/hw/xen/xen_backend.c
index c46cbb0..d6d3243 100644
--- a/hw/xen/xen_backend.c
+++ b/hw/xen/xen_backend.c
@@ -672,6 +672,7 @@ static const TypeInfo xensysdev_info = {
     .class_init    = xen_sysdev_class_init,
 };
 
+
 static void xenbe_register_types(void)
 {
     type_register_static(&xensysbus_info);
@@ -679,4 +680,17 @@ static void xenbe_register_types(void)
     type_register_static(&xendev_type_info);
 }
 
+void qmp_xen_watch_device(int domid, int devid, char* type, char* blocknode, char *devicename, Error **errp);/* FIXME */
+void qmp_xen_watch_device(int domid, int devid, char* type, char* blocknode, char *devicename, Error **errp)
+{
+     struct XenDevice *xendev = xen_be_get_xendev(type, domid, devid, &xen_blkdev_ops);
+     if (xendev == NULL) {
+      /* TODO put something in errp */
+        /* FIXME */
+     }
+    xendev->blocknode = strdup(blocknode); /* FIXME: free this */
+    xendev->devicename = strdup(devicename);/* FIXME: free this */
+    xen_be_check_state(xendev);
+}
+
 type_init(xenbe_register_types)
diff --git a/include/hw/xen/xen_pvdev.h b/include/hw/xen/xen_pvdev.h
index d473e9b..5a703be 100644
--- a/include/hw/xen/xen_pvdev.h
+++ b/include/hw/xen/xen_pvdev.h
@@ -36,6 +36,9 @@ struct XenDevice {
     char               name[64];
     int                debug;
 
+    char*              blocknode;
+    char*              devicename;
+
     enum xenbus_state  be_state;
     enum xenbus_state  fe_state;
     int                online;
diff --git a/qapi/block.json b/qapi/block.json
index f8a7a4e..22470e7 100644
--- a/qapi/block.json
+++ b/qapi/block.json
@@ -280,3 +280,23 @@
 ##
 { 'enum': 'QuorumOpType',
   'data': [ 'read', 'write', 'flush' ] }
+
+##
+# @xen-watch-device:
+#
+# Add XenWD device
+#
+# @domid: xen domain id
+#
+# @devid: xen disk device id
+#
+# @type: device type
+#
+# @blocknode: blocknode
+#
+# @devicename: node_name to attch
+#
+# Since: 2.10
+##
+{ 'command': 'xen-watch-device',
+  'data': { 'domid': 'int', 'devid': 'int', 'type': 'str', 'blocknode': 'str', 'devicename': 'str' } }
